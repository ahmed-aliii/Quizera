@model AttemptTakeViewModel

@{
    ViewData["Title"] = "Take Exam";
}

<link rel="stylesheet" href="~/lib/bootstrap/css/bootstrap.min.css" />
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css" />

<style>
    .exam-container {
        max-width: 900px;
        margin: auto;
    }

    .timer {
        font-size: 1.25rem;
        font-weight: 600;
        color: #dc3545;
    }

    .question-card {
        border-radius: 1rem;
        padding: 1.5rem;
        margin-bottom: 1.5rem;
        box-shadow: 0 2px 8px rgba(0,0,0,0.05);
    }
</style>

<div class="container py-5 exam-container">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h3 class="fw-bold text-primary"><i class="bi bi-journal-text me-2"></i>@Model.ExamTitle</h3>
        <div class="timer" id="timer"></div>
    </div>

    <form asp-action="Submit" method="post">
        <input type="hidden" name="AttemptId" value="@Model.AttemptId" />

        @foreach (var q in Model.Questions)
        {
            <div class="question-card bg-light">
                <h5><strong>Q@q.QuestionId:</strong> @q.Text</h5>
                <div class="mt-3">
                    @foreach (var opt in q.Options)
                    {
                        <div class="form-check mb-2">
                            <input type="radio"
                                   class="form-check-input"
                                   name="Answers[@q.QuestionId]"
                                   value="@opt.OptionId"
                                   id="opt_@opt.OptionId" />
                            <label class="form-check-label" for="opt_@opt.OptionId">@opt.Text</label>
                        </div>
                    }
                </div>
            </div>
        }

        <div class="text-center mt-4">
            <button type="submit" class="btn btn-success btn-lg btn-rounded px-4">
                <i class="bi bi-check-circle me-2"></i>Submit Exam
            </button>
        </div>
    </form>
</div>

<script>
    const duration = @Model.DurationInMinutes * 60;
    let remaining = duration;
    const timer = document.getElementById("timer");

    function updateTimer() {
        const min = Math.floor(remaining / 60);
        const sec = remaining % 60;
        timer.textContent = `${min}:${sec.toString().padStart(2, '0')}`;
        if (remaining <= 0) {
            document.forms[0].submit();
        } else {
            remaining--;
            setTimeout(updateTimer, 1000);
        }
    }

    updateTimer();
</script>
